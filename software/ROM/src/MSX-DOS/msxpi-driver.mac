;|===========================================================================|
;|                                                                           |
;| MSXPi Interface                                                           |
;|                                                                           |
;| Version : 1.1                                                             |
;|                                                                           |
;| Copyright (c) 2015-2023 Ronivon Candido Costa (ronivon@outlook.com)       |
;|                                                                           |
;| All rights reserved                                                       |
;|                                                                           |
;| Redistribution and use in source and compiled forms, with or without      |
;| modification, are permitted under GPL license.                            |
;|                                                                           |
;|===========================================================================|
;|                                                                           |
;| This file is part of MSXPi Interface project.                             |
;|                                                                           |
;| MSX PI Interface is free software: you can redistribute it and/or modify  |
;| it under the terms of the GNU General Public License as published by      |
;| the Free Software Foundation, either version 3 of the License, or         |
;| (at your option) any later version.                                       |
;|                                                                           |
;| MSX PI Interface is distributed in the hope that it will be useful,       |
;| but WITHOUT ANY WARRANTY; without even the implied warranty of            |
;| MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the             |
;| GNU General Public License for more details.                              |
;|                                                                           |
;| You should have received a copy of the GNU General Public License         |
;| along with MSX PI Interface.  If not, see <http://www.gnu.org/licenses/>. |
;|===========================================================================|
;
; MSXPi Driver v1.1 (2023)

CONTROL_PORT1 EQU $56
CONTROL_PORT2 EQU $57
CONTROL_PORT3 EQU $58
CONTROL_PORT4 EQU $59
DATA_PORT1 EQU $5A
DATA_PORT2 EQU $5B
DATA_PORT3 EQU $5C
DATA_PORT4 EQU $5D

TEXTTERMINATOR EQU 0
BDOS           EQU 5
BUSYRETRIES    EQU 2
RESET          EQU $FF

STARTTRANSFER  EQU $A0
SENDNEXT       EQU $A1
ENDOFTRANSFER  EQU $A2
READY          EQU $AA
ABORT          EQU $AD
BUSY           EQU $AE

RC_SUCCESS     EQU $E0
RC_CRCERROR    EQU $E2
RC_OUTOFSYNC   EQU $E5

; symbols which can be used from the kernel

; errorcodes used by DSKIO, DSKCHG and GETDPB
;
; 0	write protect error
; 2	not ready error
; 4	data (crc) error
; 6	seek error
; 8	record not found error
; 10	write fault error
; 12	other error

; errorcodes used by DSKFMT
;
; 0	write protect error
; 2	not ready error
; 4	data (crc) error
; 6	seek error
; 8	record not found error
; 10	write fault error
; 12	bad parameter
; 14	insufficient memory
; 16	other error

MYSIZE		equ	9		; Size of environment
SECLEN		equ	512		; Size of biggest sector

; INIHRD
;
; Input:	None
; Output:	None
; Changed:	af,bc,de,hl,IX,IY may be affected

; Remark: This i called twice. I distinguish the 1st and 2nd verifyig reggister A.
; A = #40 in first call, and #80 in second all.;
;
INIHRD:
        ld      a,$80
        cp      h
        ret     z
        ld      hl,MSXPIVERSION
        call    PRINT
        ;ld      hl,MSXPISKP
        ;call    PRINT
		ld	bc,3
		call	DELAY
	    scf
        ret

; START OF -----------------------------
; MSXPi DRIVES Routine          |
;---------------------------------------
; DRIVES
;
; Input: 	F	Zx set if to return physical drives
;			    Zx reset if to return at least 2 drives, if only one
;			  physical drive it becomes a phantom drive
; Output:	L	number of drives
; Changed:	F,hl,IX,IY may be affected
;
; Remark:	DOS1 does not handle L=0 correctly. It hangs the computer upon boot if L = 0.
; During boot this is called twice, with BC = FB21 and then BC = FB23.

DRIVES:
		ld		l,1
		ret	z
		ld		l,2
		ret

; END OF -------------------------------
; MSXPi DRIVES Routine          |
;---------------------------------------

; INIENV
;
; Input: 	None
; Output:	None
; Changed:	af,bc,de,hl,IX,IY may be affected
;
; Remark:	examples installs own interrupt handler, but this is NOT required.
;		depends on the hardware if this is needed.

INIENV:
        ret

; START OF -----------------------------
; MSXPi DSKIO Routine           |
;---------------------------------------
; DSKIO
;
; Input: 	A	Drivenumber
;		F	Cx reset for read
;			Cx set for write
; 		B	number of sectors
; 		C	Media descriptor
;		de	logical sectornumber
; 		hl	transfer address
; Output:	F	Cx set for error
;			Cx reset for ok
;		A	if error, errorcode
;		B	if error, remaining sectors
; Changed:	af,bc,de,hl,IX,IY may be affected
;
DSKIO:

        JR	NC,DSKIO_READ

; END OF -------------------------------
; MSXPi DSKIO Routine           |
;---------------------------------------


; START OF ----------------------------
; MSXPi DSKIO_WRITE Routine    |
;--------------------------------------
DSKIO_WRITE:
        cp      2
        jp      nc,DSKIO_ERR1

; save destination address and number of sectors to write
        push    bc               ; need to save this ?
        push    hl                ; save buffer address
        call    DSKIO_SECTINFO    ; Send sector info
        jr      c,DSKIO_ERR
        ld      de,DOS_WSEC
        call    SENDCOMMAND       ; Send sector write command "DSKIOWRS"
        jr      c,DSKIO_ERR
        pop     de                ; buffer with data to read
        pop     bc                ; number of bytes to transfer
DSKIO_WRITE_LOOP:
        push	bc
        ld      bc,SECTORSIZE
        call    SENDDATA	  ; Send the sectors (write to disk
        pop     bc
        jr      c, DSKIO_ERR1
        djnz    DSKIO_WRITE_LOOP
        or	     a
        ret
; END OF ------------------------------
; MSXPi DSKIO_WRITE Routine    |
;--------------------------------------


; START OF ----------------------------
; MSXPi DSKIO_READ Routine     |
;--------------------------------------
; DSKIO
;
; Input:    A   Drivenumber
;       F   Cx reset for read
;           Cx set for write
;       B   number of sectors
;       C   Media descriptor
;       de  logical sectornumber
;       hl  transfer address
; Output:   F   Cx set for error
;           Cx reset for ok
;       A   if error, errorcode
;       B   if error, remaining sectors
; Changed:  af,bc,de,hl,IX,IY may be affected
;
DSKIO_READ:
        cp      2
        jr      nc,DSKIO_ERR1
; save destination address and number of sectors to write
        push    bc                ;
        push    hl                ; save buffer address
        call    DSKIO_SECTINFO    ; Send sector info
        jr      c,DSKIO_ERR
        ld      de,DOS_RSEC
        call    SENDCOMMAND       ; Send sector read command "DSKIORDS"
        jr      c,DSKIO_ERR
        pop     de                ; buffer to write data from rpi
        pop     bc                ; number of bytes to transfer
DSKIO_READ_LOOP:
	push	bc
	ld	bc,SECTORSIZE
        call    RECVDATA	  ; Send the sectors (write to disk)
	pop	bc
	jr	c, DSKIO_ERR1
	djnz	DSKIO_READ_LOOP
	or	a
	ret

DSKIO_ERR:
        pop     hl
        pop     bc
DSKIO_ERR1:
        ld      a,12
        scf
        ret
; END OF ------------------------------
; MSXPi DSKIO_READ Routine     |
;--------------------------------------


; START OF ----------------------------
; MSXPi DSKIO_SECTINFO Routine |
;--------------------------------------
; DSKIO
;
; Input:    A   Drivenumber
;       F   Cx reset for read
;           Cx set for write
;       B   number of sectors
;       C   Media descriptor
;       de  logical sectornumber
;       hl  transfer address
; Output:   F   Cx set for error
;           Cx reset for ok
;       A   if error, errorcode
;       B   if error, remaining sectors
; Changed:  af,bc,de,hl,IX,IY may be affected
;

DSKIO_SECTINFO:
        push    de
        push    bc
	push	af
        LD      de,DOS_SECI
        call    SENDCOMMAND	
        jr      nc,DSKIO_SECTINFO1

DSKIO_SEC_ERR:
        pop     af
        pop     bc
	pop	de
        scf
        ret

DSKIO_SECTINFO1:

	jr      ROUTINE1

ROUTINE1:

	call	GETWRK
	
	pop	    af
	ld	    (hl),a
	inc	    hl

	pop	    bc
	ld	    (hl),b
	inc 	hl

	ld      (hl),c
	inc     hl

	pop     de
	ld      (hl),e
	inc     hl

	ld      (hl),d
	
	push	ix
	pop     de
	ld	    bc,5
	call	SENDDATA
	ret

ROUTINE2:

	; Send synchronisation header
	ld      a,READY
	call	PIWRITEBYTE
    
    ld    h,$FF            ; Initial CRC - muat march value in Server

; Send device number
	pop     af
	ld	l,a
	xor	h
	ld	h,a
	ld	a,l
	call    PIWRITEBYTE

; send number of sectors to read/write

	pop	bc
	ld      a,b
	xor	h
	ld	h,a
	ld	a,b
	call    PIWRITEBYTE

; send media decriptor

	ld      a,c
	xor	h
	ld	h,a
	ld	a,c
	call    PIWRITEBYTE

; send logical sectornumber (initial sector number)

	pop		de
	ld			a,e
	xor		h
	ld			h,a
	ld			a,e
	call    PIWRITEBYTE

	ld      a,d
	xor	h
	ld		h,a
	ld		a,d
	call    PIWRITEBYTE
	ld	a,h
	call    PIWRITEBYTE
	call	PIREADBYTE
	cp	h
	ret	z
	scf
        ret

        
; END OF ------------------------------
; MSXPi DSKIO_SECTINFO Routine |
;--------------------------------------

DSKIORDMSG:
    DB      "DSKIO READ ERROR",13,10,0

; DSKCHG
;
; Input: 	A	Drivenumber
; 		B	0
; 		C	Media descriptor
; 		hl	pointer to DPB
; Output:	F	Cx set for error
;			Cx reset for ok
;		A	if error, errorcode
;		B	if no error, disk change status
;			01 disk unchanged
;			00 unknown
;			FF disk changed
; Changed:	af,bc,de,hl,IX,IY may be affected
; Remark:	DOS1 kernel expects the DPB updated when disk change status is unknown or changed
;		DOS2 kernel does not care if the DPB is updated or not
DSKCHG:
        ld		b,00
        or		a
        ret

; Disk changed, must read sector and update DPB
DSKCHGDPB:
        ret

; GETDPB
;
; Input: 	A	Drivenumber
; 		B	first byte of FAT
; 		C	Media descriptor
; 		hl	pointer to DPB
; Output:	[hl+1]
;		..
;		[hl+18]	updated
; Changed:	af,bc,de,hl,IX,IY may be affected
; GETDPB
;
; Input: 	A	Drivenumber
; 		B	first byte of FAT
; 		C	Media descriptor
; 		hl	pointer to DPB
; Output:	[hl+1]
;		..
;		[hl+18]	updated
; Changed:	af,bc,de,hl,IX,IY may be affected

GETDPB:
        ret

DpbTable:
        db	0F8h		; Media F8
		dw	512		; 80 Tracks
		db	0Fh		; 9 sectors
		db	04h		; 1 side
		db	01h		; 3.5" 360 Kb
		db	02h
		dw	1
		db	2
		db	112
		dw	12
		dw	355
		db	2
		dw	5

		db	0F9h		; Media F9
		dw	512		; 80 Tracks
		db	0Fh		; 9 sectors
		db	04h		; 2 sides
		db	01h		; 3.5" 720 Kb
		db	02h
		dw	1
		db	2
		db	112
		dw	14
		dw	714
		db	3
		dw	7

DEFDPB	equ	DpbTable+18-1

; CHOICE
;
; Input: 	None
; Output:	hl	pointer to choice string, 0 if no choice
; Changed:	af,bc,de,hl,IX,IY may be affected

CHOICE:
		ld		hl,0
		ret

; Choices not used by MSXPi driver
ChoiceStr:	db	13,10
		db	"1 - Choice A",13,10
		db	"2 - Choice B",13,10
        db	"3 - Choice C",13,10
		db	13,10
		db	0

; DSKFMT
;
; Input: 	A	choicecode (1-9)
;		D	drivenumber
;		hl	begin of workarea
;		bc	length of workarea
; Output:	F	Cx set for error
;			Cx reset for ok
;		A	if error, errorcode
; Changed:	af,bc,de,hl,IX,IY may be affected

DSKFMT:
        scf
        ld      a,10
        ret


; MTOFF
;
; Input:    None
; Output:   None
; Changed:  af,bc,de,hl,IX,IY may be affected

DSKSTP:
MTOFF:
        ret

; OEMSTATEMENT
;
; Input:	hl	basicpointer
; Output:	F	Cx set if statement not recognized
;			Cx reset if statement is recognized
;		hl	basicpointer,	updated if recognized
;					unchanged if not recognized
; Changed:	af,bc,de,hl,IX,IY may be affected

OEMSTA:
CALLHAND:
 
    PUSH    HL
    LD  HL,CALL_TABLE         ; Table with "_" instructions
.CHKCMD:
    LD  DE,PROCNM
.LOOP:  LD  A,(DE)
    CP  (HL)
    JR  NZ,.TONEXTCMD   ; Not equal
    INC DE
    INC HL
    AND A
    JR  NZ,.LOOP    ; No end of instruction name, go checking
    LD  E,(HL)
    INC HL
    LD  D,(HL)
    POP HL      ; routine address
    CALL    GETPREVCHAR
    CALL    .CALLDE     ; Call routine
    AND A
    RET
 
.TONEXTCMD:
    LD  C,0FFH
    XOR A
    CPIR            ; Skip to end of instruction name
    INC HL
    INC HL      ; Skip address
    CP  (HL)
    JR  NZ,.CHKCMD  ; Not end of table, go checking
    POP HL
        SCF
    RET
 
.CALLDE:
    PUSH    DE
    RET
  
GETSTRPNT:
; OUT:
; HL = String Address
; B  = Length
 
        LD      HL,($F7F8)
        LD      B,(HL)
        INC     HL
        LD      E,(HL)
        INC     HL
        LD      D,(HL)
        EX      DE,HL
        RET
 
EVALTXTPARAM:
    CALL    CHKCHAR
    DEFB    "("             ; Check for (
    LD  IX,FRMEVL
    CALL    CALBAS      ; Evaluate expression
        LD      A,(VALTYP)
        CP      3               ; Text type?
        JP      NZ,TYPE_MISMATCH
        PUSH    HL
        LD  IX,FRESTR         ; Free the temporary string
        CALL    CALBAS
        POP HL
    CALL    CHKCHAR
    DEFB    ")"             ; Check for )
        RET
 
 
CHKCHAR:
    CALL    GETPREVCHAR ; Get previous basic char
    EX  (SP),HL
    CP  (HL)            ; Check if good char
    JR  NZ,SYNTAX_ERROR ; No, Syntax error
    INC HL
    EX  (SP),HL
    INC HL      ; Get next basic char
 
GETPREVCHAR:
    DEC HL
    LD  IX,CHRGTR
    JP      CALBAS
 
 
TYPE_MISMATCH:
        LD      E,13
        DB      1
 
SYNTAX_ERROR:
        LD      E,2
    LD  IX,ERRHAND  ; Call the Basic error handler
    JP  CALBAS
 
;================================================================
; call Commands start here
; ================================================================

;-----------------------
; call MSXPIVER        |
;-----------------------
_MSXPIVER:
        push    hl
        ld      hl,MSXPIVERSION
        call    PRINT
        pop     hl
        ret
        
;-----------------------
; call MSXPISTATUS     |
;-----------------------
_MSXPISTATUS:
        PUSH    HL
        LD      BC,4
        LD      DE,PINGCMD
        CALL    SENDPICMD
        LD      A,SENDNEXT
        CALL    PIEXCHANGEBYTE
        ld      hl,PIOFFLINE
        JR      C,PRINTSTATUSMSG
        CP      RC_SUCCNOSTD
        jr      NZ,PRINTSTATUSMSG
        ld      hl,PIONLINE
PRINTSTATUSMSG:
        call      PRINT
        POP       HL
        ret

;--------------------------------------------------------------------
; Call MSXPI BIOS function                                          |
;--------------------------------------------------------------------
; Verify if command has STD parameters specified
; Examples:
; call mspxi("pdir")  -> will print the output
; call mspxi("0,pdir")  -> will not print the output
; call msxpi("1,pdir")  -> will print the output to screen
; call msxpi("2,F000,pdir")  -> will store output in buffer (MSXPICALLBUF - $E3D8)       
_MSXPI:
        CALL    EVALTXTPARAM    ; Evaluate text parameter
        PUSH    HL
        CALL    GETSTRPNT
        EX      DE,HL
        CALL    PARMSEVAL
        
CALL_MSXPI1:
; At this point:
; HL = contain buffer address to store data from RPi (if provided by user, otherwise 0)
; DE = contain string address of command to send to RPi
; A  = contain the output required for the command
; B  = contain number of chars in the command
;
        PUSH    HL
        PUSH    AF
        LD      C,B
        LD      B,0
        LD      H,D
        LD      L,E
        CALL    SENDPICMD
        JR      C,CALL_MSXPIERR
        POP     AF     			; stdout option
                                        ; Verify if user wants to print STDOUT from RPi
        CP      '1'			; User did not specify. Default is to print
        JR      Z,CALL_MSXPISTDOUT
        CP      '2'
        JR      Z,CALL_MSXPISAVSTD
	POP	HL
	LD	BC,BLKSIZE
        CALL    NOSTDOUT
	XOR	A	
        LD      (HL),A
        POP     HL
        OR      A
        RET


CALL_MSXPIERR:
        POP     AF
        POP     HL
        CP      1
        JR      NZ,CALL_MSXPIERR2
        LD      A,RC_CONNERR
CALL_MSXPIERR2:
        LD      (HL),A                  ; Store return code in buffer
        POP     HL
        OR      A
        RET

CALL_MSXPISTDOUT:
	POP	DE
CALL_MSXPISTDOUT1:
        PUSH    DE
	LD	BC,BLKSIZE
        CALL    RECVDATA
        POP     HL
	LD	A,1
	JR	C,CALL_MSXPIERR2	; If error
	LD	BC,BLKSIZE
	PUSH	HL
        CALL    PRINTPISTDOUT
	POP	DE
	JR	NC,CALL_MSXPISTDOUT1
        POP     HL
        OR      A
        RET

CALL_MSXPISAVSTD:
	POP	DE
	PUSH	DE
	LD	BC,BLKSIZE
        CALL    RECVDATA		; Read first block
	POP	HL
	LD	A,1
	JR	C,CALL_MSXPIERR2
	LD	A,(HL)
	CP	RC_FAILED
	JR	Z, CALL_MSXPIERR2
	CP	RC_SUCCESS		; End of transfer - no calculations are required
	JR	Z, CALL_MSXPISAVSTDEND
					
	CP	RC_READY		; Assume there is another block and continue
	JR	Z, CALL_MSXPISAVSTD1
	SCF
	JR	CALL_MSXPIERR2
CALL_MSXPISAVSTD1:			; If its here, it's multi-block transfer	
	PUSH	HL			; Always save start of the user buffer 
	PUSH	DE			; Save current buffer address
	LD	BC,BLKSIZE		
        CALL    RECVDATA
	POP	IY
	POP	IX
	LD	A,1
	JR	C, CALL_MSXPIERR2	; Transfer error
	PUSH	IX
	LD	A,(IY + 0)		; Transfer this block header to buffer header
	LD	(IX + 0),A		; Transfer return code
	LD	L,(IX + 1)		; add block size to current buffer size
	LD	H,(IX + 2)		
	LD	C,(IY + 1)			
	LD	B,(IY + 2)
	ADD	HL,BC			; and store total in the master header (block 1 header)
	LD	(IX + 1),L
	LD	(IX + 2),H
	PUSH	IY
	POP	DE
	LD	H,D
	LD	L,E
	INC	HL
	INC	HL
	INC	HL
	LD	BC,BLKSIZE
	LDIR				; Move this block 3 bytes left (discard header)
	POP	HL
	LD	A,(HL)
	CP	RC_FAILED
	JR	Z, CALL_MSXPIERR2
	CP	RC_SUCCESS
	JR	Z, CALL_MSXPISAVSTDEND	; This was last block - finish command
	CP	RC_READY
	JR	Z, CALL_MSXPISAVSTD1

CALL_MSXPISAVSTDEND:			; Go back to BASIC
        POP     HL
        OR      A
        RET

	
;----------------------------------------
; Call MSXPI BIOS function SENDDATABLOCK|
;----------------------------------------
_MSXPISEND:
; retrive CALL parameters from stack (second position in stack)
        CALL    EVALTXTPARAM    ; Evaluate text parameter
        PUSH    HL
        CALL    GETSTRPNT
        CALL    STRTOHEX
        JR      NC,MSXPISEND1
; Buffer address is not valid hex number
        LD      HL,BUFERRMSG
        CALL    PRINT
        POP     HL
        OR      A
        RET
MSXPISEND1:
; Save buffer address to later store return code
        PUSH    HL
; First byte of buffer is saved to store return code
        INC     HL
; Second two bytes in buffer must be size of buffer
; store buffer size in BC
        LD      C,(HL)
        INC     HL
        LD      B,(HL)
        INC     HL
        LD      D,H
        LD      E,L
        CALL    SENDDATABLOCK
; skip the parameters before returning: ("xxxx") = 8 positions to skip
        POP     HL
        LD      (HL),A
        POP     HL
        OR      A
        RET

;----------------------------------------
; Call MSXPI BIOS function RECVDATABLOCK|
;----------------------------------------
_MSXPIRECV:
        CALL    EVALTXTPARAM    ; Evaluate text parameter
        PUSH    HL
        CALL    GETSTRPNT
        CALL    STRTOHEX
        JR      NC,MSXPIRECV1
; Buffer address is not valid hex number
        LD      HL,BUFERRMSG
        CALL    PRINT
        POP     HL
        OR      A
        RET
MSXPIRECV1:
        LD      D,H
        LD      E,L
        PUSH    HL
; Save first buffer address to store return core
        INC     DE
; Save two memory positions to store buffer size later
        XOR     A
        LD      (DE),A
        INC     DE
        LD      (DE),A
        INC     DE
        CALL    RECVDATABLOCK
        POP     HL
; Store return code into 1st position in buffer
        LD      (HL),A
        JR      C,MSXPIRECV2
        INC     HL
; Return buffer size to BASIC in first two positions of buffer
        LD      (HL),C
        INC     HL
        LD      (HL),B
MSXPIRECV2:
        POP     HL
        OR      A
        RET

;-----------------------
; call GETPOINTERS      |
;-----------------------
; Return in hl the Entry address of th routine indexed in A
; Input:
;  A = Routine index
; Output:
;  (sp) = address of the given routine
; Modify: af,hl
;
_GETPOINTERS:
        push    de
        ld      hl,BIOSENTRYADDR

GETPOINTERS1:
        or		a
        jr		z,GETPOINTERSEXIT
        dec		a
        inc     hl
        inc     hl
        jr		GETPOINTERS1

GETPOINTERSEXIT:
        ld		e,(hl)
        inc     hl
        ld		h,(hl)
        ld		l,e
        ld      (PROCNM),hl
        pop     de
        or      a
        ret

;-----------------------
; call MSXPISYNC       |
;-----------------------
_MSXPISYNC:
    PUSH    HL
    CALL    PSYNC
    LD      HL,PSYNC_ERROR
    JR      C,_MSXPSYNC_EXIT
    LD      HL,PSYNC_RESTORED

_MSXPSYNC_EXIT:
    CALL    PRINT
    POP     HL
    OR      A
    RET

restore_ram_slots:
    ld      a,(RAMAD1)
    ld      h,$40
    call    ENASLT
    ld      a,(RAMAD2)
    ld      h,$80
    call    ENASLT
    ret

BIOSENTRYADDR:  EQU     $
        DW      _MSXPIVER
        DW      _MSXPISTATUS
        DW      _MSXPI
        DW      _MSXPISEND
        DW      _MSXPIRECV
        DW      _MSXPISYNC
        DW      RECVDATABLOCK
        DW      SENDDATABLOCK
        DW      CHKPIRDY
        DW      PIREADBYTE
        DW      PIWRITEBYTE
        DW      PIEXCHANGEBYTE
        DW      SENDPICMD
        DW      PRINT
        DW      PRINTNLINE
        DW      PRINTNUMBER
        DW      PRINTDIGIT
        DW      PRINTPISTDOUT
        DW      PSYNC

; ================================================================
; Text messages used in the loader
; ================================================================

MSXPIVERSION:
        DB      13,10,"MSXPi BIOS v1.1."
BuildId: DB "20230327.186"
        DB      13,10
        DB      "    RCC (c) 2017-2023",0
        DB      "Commands available:",13,10
        DB      "MSXPI MSXPISEND MSXPIRECV MSXPISTATUS MSXPISYNC MSXPIVER ",13,10,0
MSXPISKP:
        DB       "Press P to boot MSXPi DOS",13,10
        DB      00

PIOFFLINE:
        DB      "Communication Error",13,10,0

PIONLINE:
        DB      "Raspberry Pi is online",13,10,0

PIWAITMSG:
        DB      13,10,"Waiting Pi boot. P to skip",13,10,0

BUFERRMSG:
        DB    "Parameters or Buffer address invalid",13,10,0

PSYNC_RESTORED:
        DB    "Communication restored",13,10,0

PSYNC_ERROR:
        DB    "Could not restore communication ",13,10,0


; ================================================================
; Table of Commands available/implemented
; ================================================================

CALL_TABLE:

        DB      "MSXPIVER",0
        DW      _MSXPIVER

        DB      "MSXPISTA",0
        DW      _MSXPISTATUS

        DB      "GETPOINT",0
        DW      _GETPOINTERS

        DB      "MSXPISND",0
        DW      _MSXPISEND

        DB      "MSXPIRCV",0
        DW      _MSXPIRECV

        DB      "MSXPISYN",0
        DW      _MSXPISYNC

        DB      "MSXPI   ",0
        DW      _MSXPI

ENDOFCMDS:
        DB      00

DOS_INI:    DB  "dskioini",0
DOS_RSEC:   DB  "dskiords",0
DOS_WSEC:   DB  "dskiowrs",0
DOS_SECI:   DB  "dskiosct",0
DOS_DRV:    DB  "dskiodrv",0
DOS_FMT:    DB  "dskiofmt",0

INCLUDE include.asm
INCLUDE putchar-msxdos.asm
INCLUDE msxpi_bios.asm
INCLUDE debug.asm
INCLUDE debug-rom.asm


