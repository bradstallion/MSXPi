// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "12/21/2022 15:39:23"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    MSXPi
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module MSXPi_vlg_sample_tst(
	A,
	D,
	IORQ_n,
	RD_n,
	SPI_MISO,
	SPI_RDY,
	SPI_SCLK,
	WR_n,
	sampler_tx
);
input [7:0] A;
input [7:0] D;
input  IORQ_n;
input  RD_n;
input  SPI_MISO;
input  SPI_RDY;
input  SPI_SCLK;
input  WR_n;
output sampler_tx;

reg sample;
time current_time;
always @(A or D or IORQ_n or RD_n or SPI_MISO or SPI_RDY or SPI_SCLK or WR_n)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module MSXPi_vlg_check_tst (
	BUSDIR_n,
	D,
	SPI_CS,
	SPI_MOSI,
	WAIT_n,
	sampler_rx
);
input  BUSDIR_n;
input [7:0] D;
input  SPI_CS;
input  SPI_MOSI;
input  WAIT_n;
input sampler_rx;

reg  BUSDIR_n_expected;
reg [7:0] D_expected;
reg  SPI_CS_expected;
reg  SPI_MOSI_expected;
reg  WAIT_n_expected;

reg  BUSDIR_n_prev;
reg [7:0] D_prev;
reg  SPI_CS_prev;
reg  SPI_MOSI_prev;
reg  WAIT_n_prev;

reg [7:0] D_expected_prev;
reg  SPI_CS_expected_prev;
reg  SPI_MOSI_expected_prev;
reg  WAIT_n_expected_prev;

reg [7:0] last_D_exp;
reg  last_SPI_CS_exp;
reg  last_SPI_MOSI_exp;
reg  last_WAIT_n_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:5] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 5'b1;
end

// update real /o prevs

always @(trigger)
begin
	BUSDIR_n_prev = BUSDIR_n;
	D_prev = D;
	SPI_CS_prev = SPI_CS;
	SPI_MOSI_prev = SPI_MOSI;
	WAIT_n_prev = WAIT_n;
end

// update expected /o prevs

always @(trigger)
begin
	D_expected_prev = D_expected;
	SPI_CS_expected_prev = SPI_CS_expected;
	SPI_MOSI_expected_prev = SPI_MOSI_expected;
	WAIT_n_expected_prev = WAIT_n_expected;
end



// expected SPI_CS
initial
begin
	SPI_CS_expected = 1'bX;
end 

// expected SPI_MOSI
initial
begin
	SPI_MOSI_expected = 1'bX;
end 

// expected WAIT_n
initial
begin
	WAIT_n_expected = 1'bX;
end 
// generate trigger
always @(BUSDIR_n_expected or BUSDIR_n or D_expected or D or SPI_CS_expected or SPI_CS or SPI_MOSI_expected or SPI_MOSI or WAIT_n_expected or WAIT_n)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected BUSDIR_n = %b | expected D = %b | expected SPI_CS = %b | expected SPI_MOSI = %b | expected WAIT_n = %b | ",BUSDIR_n_expected_prev,D_expected_prev,SPI_CS_expected_prev,SPI_MOSI_expected_prev,WAIT_n_expected_prev);
	$display("| real BUSDIR_n = %b | real D = %b | real SPI_CS = %b | real SPI_MOSI = %b | real WAIT_n = %b | ",BUSDIR_n_prev,D_prev,SPI_CS_prev,SPI_MOSI_prev,WAIT_n_prev);
`endif
	if (
		( D_expected_prev[0] !== 1'bx ) && ( D_prev[0] !== D_expected_prev[0] )
		&& ((D_expected_prev[0] !== last_D_exp[0]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port D[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", D_expected_prev);
		$display ("     Real value = %b", D_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_D_exp[0] = D_expected_prev[0];
	end
	if (
		( D_expected_prev[1] !== 1'bx ) && ( D_prev[1] !== D_expected_prev[1] )
		&& ((D_expected_prev[1] !== last_D_exp[1]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port D[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", D_expected_prev);
		$display ("     Real value = %b", D_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_D_exp[1] = D_expected_prev[1];
	end
	if (
		( D_expected_prev[2] !== 1'bx ) && ( D_prev[2] !== D_expected_prev[2] )
		&& ((D_expected_prev[2] !== last_D_exp[2]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port D[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", D_expected_prev);
		$display ("     Real value = %b", D_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_D_exp[2] = D_expected_prev[2];
	end
	if (
		( D_expected_prev[3] !== 1'bx ) && ( D_prev[3] !== D_expected_prev[3] )
		&& ((D_expected_prev[3] !== last_D_exp[3]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port D[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", D_expected_prev);
		$display ("     Real value = %b", D_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_D_exp[3] = D_expected_prev[3];
	end
	if (
		( D_expected_prev[4] !== 1'bx ) && ( D_prev[4] !== D_expected_prev[4] )
		&& ((D_expected_prev[4] !== last_D_exp[4]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port D[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", D_expected_prev);
		$display ("     Real value = %b", D_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_D_exp[4] = D_expected_prev[4];
	end
	if (
		( D_expected_prev[5] !== 1'bx ) && ( D_prev[5] !== D_expected_prev[5] )
		&& ((D_expected_prev[5] !== last_D_exp[5]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port D[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", D_expected_prev);
		$display ("     Real value = %b", D_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_D_exp[5] = D_expected_prev[5];
	end
	if (
		( D_expected_prev[6] !== 1'bx ) && ( D_prev[6] !== D_expected_prev[6] )
		&& ((D_expected_prev[6] !== last_D_exp[6]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port D[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", D_expected_prev);
		$display ("     Real value = %b", D_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_D_exp[6] = D_expected_prev[6];
	end
	if (
		( D_expected_prev[7] !== 1'bx ) && ( D_prev[7] !== D_expected_prev[7] )
		&& ((D_expected_prev[7] !== last_D_exp[7]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port D[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", D_expected_prev);
		$display ("     Real value = %b", D_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_D_exp[7] = D_expected_prev[7];
	end
	if (
		( SPI_CS_expected_prev !== 1'bx ) && ( SPI_CS_prev !== SPI_CS_expected_prev )
		&& ((SPI_CS_expected_prev !== last_SPI_CS_exp) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port SPI_CS :: @time = %t",  $realtime);
		$display ("     Expected value = %b", SPI_CS_expected_prev);
		$display ("     Real value = %b", SPI_CS_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_SPI_CS_exp = SPI_CS_expected_prev;
	end
	if (
		( SPI_MOSI_expected_prev !== 1'bx ) && ( SPI_MOSI_prev !== SPI_MOSI_expected_prev )
		&& ((SPI_MOSI_expected_prev !== last_SPI_MOSI_exp) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port SPI_MOSI :: @time = %t",  $realtime);
		$display ("     Expected value = %b", SPI_MOSI_expected_prev);
		$display ("     Real value = %b", SPI_MOSI_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_SPI_MOSI_exp = SPI_MOSI_expected_prev;
	end
	if (
		( WAIT_n_expected_prev !== 1'bx ) && ( WAIT_n_prev !== WAIT_n_expected_prev )
		&& ((WAIT_n_expected_prev !== last_WAIT_n_exp) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port WAIT_n :: @time = %t",  $realtime);
		$display ("     Expected value = %b", WAIT_n_expected_prev);
		$display ("     Real value = %b", WAIT_n_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_WAIT_n_exp = WAIT_n_expected_prev;
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#100000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module MSXPi_vlg_vec_tst();
// constants                                           
// general purpose registers
reg [7:0] A;
reg [7:0] treg_D;
reg IORQ_n;
reg RD_n;
reg SPI_MISO;
reg SPI_RDY;
reg SPI_SCLK;
reg WR_n;
// wires                                               
wire BUSDIR_n;
wire [7:0] D;
wire SPI_CS;
wire SPI_MOSI;
wire WAIT_n;

wire sampler;                             

// assign statements (if any)                          
assign D = treg_D;
MSXPi i1 (
// port map - connection between master ports and signals/registers   
	.A(A),
	.BUSDIR_n(BUSDIR_n),
	.D(D),
	.IORQ_n(IORQ_n),
	.RD_n(RD_n),
	.SPI_CS(SPI_CS),
	.SPI_MISO(SPI_MISO),
	.SPI_MOSI(SPI_MOSI),
	.SPI_RDY(SPI_RDY),
	.SPI_SCLK(SPI_SCLK),
	.WAIT_n(WAIT_n),
	.WR_n(WR_n)
);
// A[ 7 ]
initial
begin
	A[7] = 1'b0;
end 
// A[ 6 ]
initial
begin
	A[6] = 1'b1;
end 
// A[ 5 ]
initial
begin
	A[5] = 1'b0;
end 
// A[ 4 ]
initial
begin
	A[4] = 1'b1;
end 
// A[ 3 ]
initial
begin
	A[3] = 1'b0;
end 
// A[ 2 ]
initial
begin
	A[2] = 1'b1;
end 
// A[ 1 ]
initial
begin
	A[1] = 1'b1;
end 
// A[ 0 ]
initial
begin
	A[0] = 1'b0;
end 
// D[ 7 ]
initial
begin
	treg_D[7] = 1'b1;
end 
// D[ 6 ]
initial
begin
	treg_D[6] = 1'b0;
end 
// D[ 5 ]
initial
begin
	treg_D[5] = 1'b1;
end 
// D[ 4 ]
initial
begin
	treg_D[4] = 1'b0;
end 
// D[ 3 ]
initial
begin
	treg_D[3] = 1'b1;
end 
// D[ 2 ]
initial
begin
	treg_D[2] = 1'b1;
end 
// D[ 1 ]
initial
begin
	treg_D[1] = 1'b1;
end 
// D[ 0 ]
initial
begin
	treg_D[0] = 1'b0;
end 

// IORQ_n
initial
begin
	IORQ_n = 1'b0;
end 

// RD_n
initial
begin
	RD_n = 1'b0;
end 

// SPI_MISO
initial
begin
	SPI_MISO = 1'b0;
end 

// SPI_RDY
initial
begin
	SPI_RDY = 1'b0;
end 

// SPI_SCLK
always
begin
	SPI_SCLK = 1'b0;
	SPI_SCLK = #2500 1'b1;
	#2500;
end 

// WR_n
initial
begin
	WR_n = 1'b0;
end 

MSXPi_vlg_sample_tst tb_sample (
	.A(A),
	.D(D),
	.IORQ_n(IORQ_n),
	.RD_n(RD_n),
	.SPI_MISO(SPI_MISO),
	.SPI_RDY(SPI_RDY),
	.SPI_SCLK(SPI_SCLK),
	.WR_n(WR_n),
	.sampler_tx(sampler)
);

MSXPi_vlg_check_tst tb_out(
	.BUSDIR_n(BUSDIR_n),
	.D(D),
	.SPI_CS(SPI_CS),
	.SPI_MOSI(SPI_MOSI),
	.WAIT_n(WAIT_n),
	.sampler_rx(sampler)
);
endmodule

